/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ../../../../public/buho.glb 
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { proxy, useSnapshot } from 'valtio'
import { HexColorPicker } from 'react-colorful'
import '../styles.css'

const state = proxy({
    current: null,
    items: {
        pupilastl: '#f1f1f1',
        ojosstl: '#fff',
        Izquierda: '#fff',
        Derecha: '#fff',
        Tronco: '#1f1f1f',
        Pies: '#fff',
        Ojos: '#fff',
        Espalda: '#f1f1f1',
        Pecho: '#fff',
    },
})

export function Owl(props) {
    const ref = useRef()
    const snap = useSnapshot(state)
    const { nodes, materials } = useGLTF('/buho.glb')
    const [hovered, set] = useState(null)

    return (
        <group
            ref={ref}
            onPointerOver={(e) => (e.stopPropagation(), set(e.object.material.name))}
            onPointerOut={(e) => e.intersections.length === 0 && set(null)}
            onPointerMissed={() => (state.current = null)}
            onClick={(e) => {
                e.stopPropagation()
                state.current = e.object.material.name
            }}
            {...props}
            scale={0.6}
        >
            <mesh
                geometry={nodes.pupilastl.geometry}
                material={materials.pupilas}
                position={[-0.956, -1.686, -0.111]}
                rotation={[0, 0.624, 0]}
                scale={[0.125, 0.125, 0.12]}
                material-color={snap.items.pupilastl}
            />
            <mesh
                geometry={nodes.ojosstl.geometry}
                material={materials.ojos}
                position={[0.036, -0.01, 0.107]}
                rotation={[0, 0.632, 0]}
                scale={0.125}
                material-color={snap.items.ojosstl}
            />
            <group rotation={[0, -1.061, 0]}>
                <group rotation={[-Math.PI, 1.482, -Math.PI]}>
                    <group position={[-0.819, -1.27, -0.731]}>
                        <group scale={0.1}>
                            <mesh
                                geometry={nodes.Izquierda.geometry}
                                material={materials['Ala izquierda']}
                                material-color={snap.items.Izquierda}
                            />
                            <mesh
                                geometry={nodes.Derecha.geometry}
                                material={materials['Ala derecha']}
                                material-color={snap.items.Derecha}
                            />
                            <mesh
                                geometry={nodes.Tronco.geometry}
                                material={materials.tronco}
                                material-color={snap.items.Tronco}
                            />
                            <mesh
                                geometry={nodes.Ojos.geometry}
                                material={materials.Ojos}
                                scale={0}
                                material-color={snap.items.Ojos}
                            />
                            <mesh
                                geometry={nodes.Pies.geometry}
                                material={materials.Pies}
                                material-color={snap.items.Pies}
                            />
                            <mesh
                                geometry={nodes.Espalda.geometry}
                                material={materials.Espalda}
                                material-color={snap.items.Espalda}
                            />
                            <mesh
                                geometry={nodes.Pecho.geometry}
                                material={materials.Pecho}
                                material-color={snap.items.Pecho}
                            />
                        </group>
                    </group>
                </group>
            </group>
        </group>
    )
}

useGLTF.preload('/buho.glb')

export function PickerO() {
    const snap = useSnapshot(state)
    return (
        <div style={{ display: snap.current ? 'block' : 'none' }}>
            <HexColorPicker
                className="picker"
                color={snap.items[snap.current]}
                onChange={(color) => (state.items[snap.current] = color)}
            />
            <h1>{snap.current}</h1>
        </div>
    )
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 ../../../../../public/modelsThree/hand.glb 
*/

import React, { useRef, useEffect, useState, useCallback } from 'react'
import { useGLTF } from '@react-three/drei'
import { proxy, useSnapshot } from 'valtio'
import { HexColorPicker } from 'react-colorful'
import '../styles.css'

const state = proxy({
    current: null,
    items: {
        mano: '#f1f1f1', // Valor por defecto
    },
})

export function Hand(props) {
    const ref = useRef()
    const snap = useSnapshot(state)
    const { nodes, materials } = useGLTF('../../../../public/hand.glb')
    const [hovered, set] = useState(null)

    useEffect(() => {
        const cursor = '/cursor-paint.png'
        if (hovered) {
            document.body.style.cursor = `url('${cursor}'), auto`
            return () => {
                document.body.style.cursor = 'auto'
            }
        }
    }, [hovered])
    const handlePointerOver = useCallback((e) => {
        e.stopPropagation()
        set(e.object.material.name)
    }, [])

    const handlePointerOut = useCallback((e) => {
        if (e.intersections.length === 0) set(null)
    }, [])

    const handlePointerMissed = useCallback(() => {
        state.current = null
    }, [])

    const handleClick = useCallback((e) => {
        e.stopPropagation()
        state.current = e.object.material.name
    }, [])

    return (
        <group
            ref={ref}
            onPointerOver={handlePointerOver}
            onPointerOut={handlePointerOut}
            onPointerMissed={handlePointerMissed}
            onClick={handleClick}
            {...props}
        >
            <mesh
                geometry={nodes.mano.geometry}
                material={nodes.mano.material}
                material-color={state.items.mano}
                scale={0.06}
            />
        </group>
    )
}

useGLTF.preload('../../../../public/hand.glb')

export function PickerH() {
    const snap = useSnapshot(state)
    return (
        <div className={snap.current ? 'picker absolute' : 'disabled'}>
            <HexColorPicker
                color={state.items.mano}
                onChange={(newColor) => (state.items.mano = newColor)}
            />
            <h1 classname="name">{snap.current}</h1>
        </div>
    )
}
